#if !canImport(ObjectiveC)
import XCTest

extension ArrayAppendingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArrayAppendingTests = [
        ("testAppending", testAppending),
        ("testAppendingToEmptyArray", testAppendingToEmptyArray),
    ]
}

extension ArrayPrependingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArrayPrependingTests = [
        ("testPrepending", testPrepending),
        ("testPrependingToEmptyArray", testPrependingToEmptyArray),
    ]
}

extension ArrayRemovingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArrayRemovingTests = [
        ("testRemoving", testRemoving),
        ("testRemovingDuplicates", testRemovingDuplicates),
        ("testRemovingFirstFromEmptyArray", testRemovingFirstFromEmptyArray),
        ("testRemovingFirstFromManyElementsArray", testRemovingFirstFromManyElementsArray),
        ("testRemovingFirstFromOneElementArray", testRemovingFirstFromOneElementArray),
        ("testRemovingLastFromEmptyArray", testRemovingLastFromEmptyArray),
        ("testRemovingLastFromManyElementsArray", testRemovingLastFromManyElementsArray),
        ("testRemovingLastFromOneElementArray", testRemovingLastFromOneElementArray),
    ]
}

extension ArrayToOptionSetTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ArrayToOptionSetTests = [
        ("testToOptionSet", testToOptionSet),
    ]
}

extension CharacterSetCharactersTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CharacterSetCharactersTests = [
        ("testComparingToAlternativeImplementation0", testComparingToAlternativeImplementation0),
        ("testComparingToAlternativeImplementation1", testComparingToAlternativeImplementation1),
        ("testComparingToCannedArray", testComparingToCannedArray),
    ]
}

extension ControlFlowTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ControlFlowTests = [
        ("testElseIsExecutedOnFalseBoolean", testElseIsExecutedOnFalseBoolean),
        ("testElseIsExecutedOnFalseBooleanAfterThen", testElseIsExecutedOnFalseBooleanAfterThen),
        ("testElseIsExecutedOnFalseBooleanAfterThenWithAutoclosure", testElseIsExecutedOnFalseBooleanAfterThenWithAutoclosure),
        ("testElseIsExecutedOnFalseBooleanWithAutoclosure", testElseIsExecutedOnFalseBooleanWithAutoclosure),
        ("testElseIsNotExecutedOnTrueBoolean", testElseIsNotExecutedOnTrueBoolean),
        ("testElseIsNotExecutedOnTrueBooleanAfterThen", testElseIsNotExecutedOnTrueBooleanAfterThen),
        ("testElseIsNotExecutedOnTrueBooleanAfterThenWithAutoclosure", testElseIsNotExecutedOnTrueBooleanAfterThenWithAutoclosure),
        ("testElseIsNotExecutedOnTrueBooleanWithAutoclosure", testElseIsNotExecutedOnTrueBooleanWithAutoclosure),
        ("testElseRethrowsError", testElseRethrowsError),
        ("testThenIsExecutedOnTrueBoolean", testThenIsExecutedOnTrueBoolean),
        ("testThenIsExecutedOnTrueBooleanWithAutoclosure", testThenIsExecutedOnTrueBooleanWithAutoclosure),
        ("testThenIsNotExecutedOnFalseBoolean", testThenIsNotExecutedOnFalseBoolean),
        ("testThenIsNotExecutedOnFalseBooleanWithAutoclosure", testThenIsNotExecutedOnFalseBooleanWithAutoclosure),
        ("testThenRethrowsError", testThenRethrowsError),
    ]
}

extension DictionaryDeepMergingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__DictionaryDeepMergingTests = [
        ("test", test),
        ("testRewritingValue", testRewritingValue),
    ]
}

extension ForLoopTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ForLoopTests = [
        ("testForCanReturn", testForCanReturn),
        ("testForLoopCanBreak", testForLoopCanBreak),
        ("testForLoopCanContinue", testForLoopCanContinue),
        ("testForLoopCanThrow", testForLoopCanThrow),
        ("testForLoopFinishes", testForLoopFinishes),
    ]
}

extension IterableRandomAccessCollectionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__IterableRandomAccessCollectionTests = [
        ("testFirstIterateParameter", testFirstIterateParameter),
        ("testIterateEnumeratesAllElements", testIterateEnumeratesAllElements),
        ("testIterateRethrowsError", testIterateRethrowsError),
    ]
}

extension Matrix2DTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__Matrix2DTests = [
        ("testInit", testInit),
        ("testInitWithRows", testInitWithRows),
        ("testIterator", testIterator),
        ("testReservedLength", testReservedLength),
        ("testsubscriptGetter", testsubscriptGetter),
        ("testsubscriptSetter", testsubscriptSetter),
    ]
}

extension OptionSetToArrayTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__OptionSetToArrayTests = [
        ("testToArray", testToArray),
    ]
}

extension PrependingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__PrependingTests = [
        ("testPrependingEmptyString", testPrependingEmptyString),
        ("testPrependingString", testPrependingString),
        ("testPrependingToEmptyString", testPrependingToEmptyString),
    ]
}

extension RandomAccessMutableCollectionTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RandomAccessMutableCollectionTests = [
        ("testSubscriptGetter", testSubscriptGetter),
        ("testSubscriptSetter", testSubscriptSetter),
    ]
}

extension RegularExpressionMatchOperatorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__RegularExpressionMatchOperatorTests = [
        ("testWhenFalse", testWhenFalse),
        ("testWhenTrue", testWhenTrue),
    ]
}

extension StringProtocolSubscriptTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringProtocolSubscriptTests = [
        ("testABCDEString", testABCDEString),
        ("testABCDESubstring", testABCDESubstring),
        ("testNegativeIndex", testNegativeIndex),
        ("testOutOfBounds", testOutOfBounds),
        ("testStringSubscripts", testStringSubscripts),
        ("testSubstringSubscript", testSubstringSubscript),
    ]
}

extension StringRemovingTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringRemovingTests = [
        ("testRemovingCharacters", testRemovingCharacters),
        ("testRemovingPrefix", testRemovingPrefix),
        ("testRemovingSuffix", testRemovingSuffix),
    ]
}

extension StringWordTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__StringWordTests = [
        ("testCanMatchWhitespace", testCanMatchWhitespace),
        ("testCanMatchWord", testCanMatchWord),
        ("testCannotMatchEmptyString1", testCannotMatchEmptyString1),
        ("testCannotMatchEmptyString2", testCannotMatchEmptyString2),
        ("testCannotMatchSymbols", testCannotMatchSymbols),
        ("testEmptyStringCannotContainWord", testEmptyStringCannotContainWord),
        ("testReplacingWord", testReplacingWord),
        ("testReplacingWordNotFound", testReplacingWordNotFound),
        ("testReturnsFalseIfNotMatched", testReturnsFalseIfNotMatched),
        ("testWordCanOccupyWholeString", testWordCanOccupyWholeString),
    ]
}

extension TimesTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__TimesTests = [
        ("testNegativeTimes", testNegativeTimes),
        ("testNegativeTimesWithAutoclosure", testNegativeTimesWithAutoclosure),
        ("testOneTimes", testOneTimes),
        ("testOneTimesWithAutoclosure", testOneTimesWithAutoclosure),
        ("testThirtyTimes", testThirtyTimes),
        ("testThirtyTimesWithAutoclosure", testThirtyTimesWithAutoclosure),
        ("testTimesRethrowsError", testTimesRethrowsError),
        ("testTwoTimes", testTwoTimes),
        ("testTwoTimesWithAutoclosure", testTwoTimesWithAutoclosure),
        ("testZeroTimes", testZeroTimes),
        ("testZeroTimesWithAutoclosure", testZeroTimesWithAutoclosure),
    ]
}

extension VectorTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__VectorTests = [
        ("testAddElement", testAddElement),
        ("testContains", testContains),
        ("testEquatable", testEquatable),
        ("testGetIndex", testGetIndex),
        ("testIterator", testIterator),
        ("testRemoveAtIndex", testRemoveAtIndex),
        ("testRemoveElement", testRemoveElement),
        ("testReservedLengthGetter", testReservedLengthGetter),
        ("testReservedLengthInit", testReservedLengthInit),
        ("testSizeGetter", testSizeGetter),
        ("testSubscriptGetter", testSubscriptGetter),
        ("testSubscriptSetter", testSubscriptSetter),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(ArrayAppendingTests.__allTests__ArrayAppendingTests),
        testCase(ArrayPrependingTests.__allTests__ArrayPrependingTests),
        testCase(ArrayRemovingTests.__allTests__ArrayRemovingTests),
        testCase(ArrayToOptionSetTests.__allTests__ArrayToOptionSetTests),
        testCase(CharacterSetCharactersTests.__allTests__CharacterSetCharactersTests),
        testCase(ControlFlowTests.__allTests__ControlFlowTests),
        testCase(DictionaryDeepMergingTests.__allTests__DictionaryDeepMergingTests),
        testCase(ForLoopTests.__allTests__ForLoopTests),
        testCase(IterableRandomAccessCollectionTests.__allTests__IterableRandomAccessCollectionTests),
        testCase(Matrix2DTests.__allTests__Matrix2DTests),
        testCase(OptionSetToArrayTests.__allTests__OptionSetToArrayTests),
        testCase(PrependingTests.__allTests__PrependingTests),
        testCase(RandomAccessMutableCollectionTests.__allTests__RandomAccessMutableCollectionTests),
        testCase(RegularExpressionMatchOperatorTests.__allTests__RegularExpressionMatchOperatorTests),
        testCase(StringProtocolSubscriptTests.__allTests__StringProtocolSubscriptTests),
        testCase(StringRemovingTests.__allTests__StringRemovingTests),
        testCase(StringWordTests.__allTests__StringWordTests),
        testCase(TimesTests.__allTests__TimesTests),
        testCase(VectorTests.__allTests__VectorTests),
    ]
}
#endif
